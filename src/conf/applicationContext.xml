<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd">

 
 <import resource="classpath:jms/applicationContext.xml"></import>
  
  <bean id="messageProcessor" class="com.home.camel.MessageProcessor"></bean>

  <camel:camelContext  id="camelContext">
  
    <camel:route>
      <camel:from uri="file:/home/gauravrehan/Documents/temp/source?noop=true"/>
      <!-- Wiretapping the whole exchange (in, out, headers etc..) -->
      <camel:wireTap uri="jms:queue:AUDIT"></camel:wireTap>
      <camel:process ref="messageProcessor"/>
      <camel:choice>

      <!-- if file ends with xml then put in xml queue -->

      	<camel:when>
      		<camel:simple>${header.CamelFileName} regex '^.*xml$'</camel:simple>
      		<camel:to  uri="jms:queue:COM.HOME.CAMEL.XML"/>
      	</camel:when>

      	<!-- if file ends with txt then put in txt queue -->

      	<camel:when>
      		<camel:simple>${header.CamelFileName} regex '^.*txt$'</camel:simple>
      		<camel:to  uri="jms:queue:COM.HOME.CAMEL.TXT"/>
      	</camel:when>
      	

      	<!-- everything else goes in error queue -->
      	<camel:otherwise>
      			<camel:to  uri="jms:queue:COM.HOME.CAMEL.ERROR"/>
      			<!--  And stop here. don't send it further out of choice scope. -->
      			<camel:stop />
      	</camel:otherwise>
      	
      </camel:choice>
      <!-- out of choice, send everything that is not stopped (in the choice) to the REQUEST Queue -->
      <camel:to uri="jms:queue:COM.HOME.CAMEL.REQUEST"/>
    </camel:route>
    
    <camel:route>
      <camel:from uri="jms:queue:COM.HOME.CAMEL.XML"/>
	  <camel:process ref="messageProcessor"/>
      <camel:filter>
       <camel:xpath>/order[(@test)]</camel:xpath>
       <camel:to uri="jms:queue:COM.HOME.CAMEL.RESPONSE"/>
      </camel:filter>
      <!--  below to is not required. if you put below to then filtered resulted get copied over
      <camel:to uri="jms:queue:COM.HOME.CAMEL.RESPONSE"/> -->
    </camel:route>
    
    
    <!-- Multicast:
    send messages in parallel to multiple queues in parallel. if we remove parallelProcessing attribute then still 
    multicast happens but it happens sequentially.
    to do it parallely either we can use the default executor with default 10 thread or provide our own like
    we did here with 16 threads.
    stopOnException stops on exception
     -->
    <camel:route>
      <camel:from uri="jms:queue:COM.HOME.CAMEL.REQUEST"/>
	  <camel:multicast stopOnException="true" parallelProcessing="true"  executorServiceRef="executor">
	  	<camel:to uri="jms:queue:MULTICAST1"></camel:to>
	  	<camel:to uri="jms:queue:MULTICAST2"></camel:to>
	  </camel:multicast>
    </camel:route>
    
  </camel:camelContext>
  
  <!-- custom executor -->
  <bean id="executor" class="java.util.concurrent.Executors"
 factory-method="newFixedThreadPool">
  <constructor-arg index="0" value="16"/>
</bean>

</beans>